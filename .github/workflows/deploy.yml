name: Deploy WordPress to Azure App Service

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: wp-az-docker-template    # Reemplazar con el nombre de tu App Service
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  NODE_VERSION: '18.x'
  PHP_VERSION: '8.2'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🛒 Checkout repository
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, mbstring, pdo, redis
        coverage: none

    - name: 📦 Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: 🔧 Install Composer dependencies
      run: |
        if [ -f "composer.json" ]; then
          composer install --no-progress --no-suggest --no-interaction --prefer-dist --optimize-autoloader
        fi

    - name: 🧪 Run PHP syntax check
      run: |
        find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;

    - name: 🏗️ Build Docker image for testing
      run: |
        docker build -t wp-az-docker-template:test .

    - name: 🧪 Test Docker image
      run: |
        docker run --rm -d --name vylp-test -p 8080:80 wp-az-docker-template:test
        sleep 30
        curl -f http://localhost:8080 || exit 1
        docker stop vylp-test

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 🛒 Checkout repository
      uses: actions/checkout@v4

    - name: 🔒 Run security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'wp-az-docker-template:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 🛒 Checkout repository
      uses: actions/checkout@v4

    - name: 🔑 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

    - name: 🏗️ Build and push to GitHub Container Registry
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker build -t ghcr.io/${{ github.repository_owner }}/wp-az-docker-template:staging-${{ github.sha }} .
        docker push ghcr.io/${{ github.repository_owner }}/wp-az-docker-template:staging-${{ github.sha }}

    - name: 🚀 Deploy to Azure App Service Staging
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}-staging
        images: ghcr.io/${{ github.repository_owner }}/wp-az-docker-template:staging-${{ github.sha }}

    - name: 🧪 Health check staging
      run: |
        sleep 60
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 🛒 Checkout repository
      uses: actions/checkout@v4

    - name: 🔑 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🏗️ Build and push to GitHub Container Registry
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker build -t ghcr.io/${{ github.repository_owner }}/wp-az-docker-template:latest .
        docker build -t ghcr.io/${{ github.repository_owner }}/wp-az-docker-template:${{ github.sha }} .
        docker push ghcr.io/${{ github.repository_owner }}/wp-az-docker-template:latest
        docker push ghcr.io/${{ github.repository_owner }}/wp-az-docker-template:${{ github.sha }}

    - name: 🚀 Deploy to Azure App Service Production
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        images: ghcr.io/${{ github.repository_owner }}/wp-az-docker-template:${{ github.sha }}

    - name: 🧪 Health check production
      run: |
        sleep 60
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net || exit 1

    - name: 📢 Notify deployment success
      if: success()
      run: |
        echo "✅ Deployment successful to production!"
        echo "🌐 Site URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"

    - name: 🚨 Notify deployment failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        exit 1

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: 🧹 Cleanup old images
      run: |
        echo "🗑️ Cleanup handled by GitHub Container Registry retention policies"
        echo "✅ GitHub Container Registry automatically manages image retention"